name: Build RadioCLI

on:
  push:
    branches: [ master, main ]
    tags: ['v*']
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: radio_cli
            asset_name: radio_cli-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: radio_cli
            asset_name: radio_cli-aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: radio_cli
            asset_name: radio_cli-x86_64-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: radio_cli.exe
            asset_name: radio_cli-x86_64-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev mpv

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install sqlite mpv
          
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install SQLite using vcpkg
          vcpkg install sqlite3:x64-windows
          
          # Set environment variables for build
          echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV
          echo "SQLITE3_LIB_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib" >> $env:GITHUB_ENV
          echo "SQLITE3_INCLUDE_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\include" >> $env:GITHUB_ENV
          
          # Make the SQLite lib file available to the Rust linker
          echo "RUSTFLAGS=-L $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib" >> $env:GITHUB_ENV
          echo "LIBSQLITE3_SYS_USE_PKG_CONFIG=0" >> $env:GITHUB_ENV
          
          # Create a lib directory link for Rust to find sqlite3.lib
          $lib_dir = "$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib"
          Copy-Item -Path "$lib_dir\sqlite3.lib" -Destination "C:\Windows\System32\"
          
          # Enable skip_mpv feature for Windows builds
          cargo build --release --features skip_mpv --target ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.target }}-cargo-

      - name: Build (macOS ARM)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          mkdir -p dist
          cp target/aarch64-apple-darwin/release/${{ matrix.binary_name }} dist/
          cd dist && tar -czf ../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
      
      - name: Build (Non-Windows, Non-macOS-ARM)
        if: matrix.os != 'windows-latest' && matrix.target != 'aarch64-apple-darwin'
        run: |
          cargo build --release --target ${{ matrix.target }}
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
          cd dist && tar -czf ../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
      
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Create dist directory and copy binary
          New-Item -ItemType Directory -Force -Path dist
          
          # Force a clean build with skip_mpv feature
          Write-Host "Building with skip_mpv feature for Windows"
          
          # Create .cargo/config file to help with finding libraries
          New-Item -ItemType Directory -Force -Path .cargo
          Set-Content -Path ".cargo/config" -Value @"
[target.x86_64-pc-windows-msvc]
rustflags = ["-C", "link-arg=/LIBPATH:$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib"]
"@
          
          # Try several build approaches
          try {
            # Attempt 1: Build with skip_mpv feature and clean environment
            cargo clean
            cargo build --release --features skip_mpv --target ${{ matrix.target }} --verbose
          }
          catch {
            Write-Host "First build attempt failed, trying alternative approach..."
            
            # Attempt 2: Install SQLite3 via vcpkg again with explicit paths
            vcpkg install sqlite3:x64-windows --triplet=x64-windows
            
            $env:SQLITE3_LIB_DIR = "$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib"
            $env:SQLITE3_INCLUDE_DIR = "$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\include"
            $env:RUSTFLAGS = "-L$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib"
            
            cargo clean
            cargo build --release --features skip_mpv --target ${{ matrix.target }} --verbose
          }
          
          Copy-Item target\${{ matrix.target }}\release\${{ matrix.binary_name }} -Destination dist\
          cd dist
          7z a -tzip ..\${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            **/radio_cli-*.tar.gz
            **/radio_cli-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}