name: Update Homebrew Formula

on:
  release:
    types: [published]

permissions:
  contents: write  # This gives write permission to repository contents

jobs:
  update-formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly set write permissions for this job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main       # Explicitly checkout the main branch
          fetch-depth: 0  # We need the full history for tags
          token: ${{ secrets.GITHUB_TOKEN }}  # Use the automatic token provided by GitHub

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Verify the tag exists
          if ! git tag | grep -q "$VERSION"; then
            echo "Tag v$VERSION does not exist. Available tags:"
            git tag
            exit 1
          fi

      - name: Calculate SHA256
        id: shasum
        run: |
          # Wait for GitHub to process the release
          echo "Waiting for GitHub release to be processed..."
          sleep 10
          
          # Download the source tarball
          echo "Downloading source tarball..."
          curl -L -f "https://github.com/${{ github.repository }}/archive/refs/tags/v${{ env.VERSION }}.tar.gz" -o "v${{ env.VERSION }}.tar.gz"
          
          # Calculate SHA256 for source
          SHA256=$(shasum -a 256 "v${{ env.VERSION }}.tar.gz" | awk '{print $1}')
          echo "Source SHA256: $SHA256"
          echo "SHA256=$SHA256" >> $GITHUB_ENV
          
          # Download the binary for macOS Intel
          echo "Downloading macOS Intel binary..."
          curl -L -f "https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}/radio_cli-macos-intel.tar.gz" -o "macos-intel.tar.gz" || echo "Warning: macOS Intel binary not available yet"
          
          if [ -f "macos-intel.tar.gz" ]; then
            MACOS_INTEL_SHA256=$(shasum -a 256 "macos-intel.tar.gz" | awk '{print $1}')
            echo "macOS Intel binary SHA256: $MACOS_INTEL_SHA256"
            echo "MACOS_INTEL_SHA256=$MACOS_INTEL_SHA256" >> $GITHUB_ENV
          fi
          
          # Download the binary for macOS Apple Silicon
          echo "Downloading macOS Apple Silicon binary..."
          curl -L -f "https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}/radio_cli-macos-apple-silicon.tar.gz" -o "macos-arm.tar.gz" || echo "Warning: macOS Apple Silicon binary not available yet"
          
          if [ -f "macos-arm.tar.gz" ]; then
            MACOS_ARM_SHA256=$(shasum -a 256 "macos-arm.tar.gz" | awk '{print $1}')
            echo "macOS Apple Silicon binary SHA256: $MACOS_ARM_SHA256"
            echo "MACOS_ARM_SHA256=$MACOS_ARM_SHA256" >> $GITHUB_ENV
          fi

      - name: Update formula
        run: |
          echo "Updating formula with new version and SHA256..."
          
          # Update main source URL and SHA256
          sed -i "s|url \"https://github.com/${{ github.repository }}/archive/refs/tags/v[0-9.]*\.tar\.gz\"|url \"https://github.com/${{ github.repository }}/archive/refs/tags/v${{ env.VERSION }}.tar.gz\"|" Formula/radio-cli.rb
          sed -i "/^  url \"https:/s|sha256 \"[a-f0-9]*\"|sha256 \"${{ env.SHA256 }}\"|" Formula/radio-cli.rb
          
          # Explicitly update all version numbers in URLs directly
          echo "Updating all binary URLs to version v${{ env.VERSION }}..."
          
          # Update URLs with direct version replacement - more reliable
          sed -i "s|/download/v[0-9.]*|/download/v${{ env.VERSION }}|g" Formula/radio-cli.rb
          
          # Update the SHA256 hashes for binaries in case we switch back to the resource model
          if [ -n "${{ env.MACOS_INTEL_SHA256 }}" ]; then
            echo "Updating macOS Intel binary hash..."
            sed -i "/macos-intel-binary/,/end/ s|sha256 \"[a-f0-9]*\"|sha256 \"${{ env.MACOS_INTEL_SHA256 }}\"|g" Formula/radio-cli.rb 2>/dev/null || true
            sed -i "/Hardware\.CPU\.intel/,/end/ s|sha256 \"[a-f0-9]*\"|sha256 \"${{ env.MACOS_INTEL_SHA256 }}\"|g" Formula/radio-cli.rb
          fi
          
          if [ -n "${{ env.MACOS_ARM_SHA256 }}" ]; then
            echo "Updating macOS Apple Silicon binary hash..."
            sed -i "/macos-arm-binary/,/end/ s|sha256 \"[a-f0-9]*\"|sha256 \"${{ env.MACOS_ARM_SHA256 }}\"|g" Formula/radio-cli.rb 2>/dev/null || true
            sed -i "/Hardware\.CPU\.arm/,/end/ s|sha256 \"[a-f0-9]*\"|sha256 \"${{ env.MACOS_ARM_SHA256 }}\"|g" Formula/radio-cli.rb
          fi
          
          # Verify all URLs have the correct version
          echo "Verifying URLs have correct version..."
          grep -n "download/v" Formula/radio-cli.rb
          
          # Show diff of changes
          echo "Formula changes:"
          git diff Formula/radio-cli.rb

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            git add Formula/radio-cli.rb
          fi
          
          if ! git diff --staged --quiet; then
            git commit -m "Update formula to v${{ env.VERSION }}"
            
            # Make sure we're on main branch and it's up to date
            git checkout main
            git pull --rebase
            
            # Apply our changes on top if needed
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              if ! git merge-base --is-ancestor HEAD^ main; then
                git cherry-pick HEAD^..HEAD
              fi
            fi
            
            # Push changes using token-based authentication
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
            git push origin main
          else
            echo "No changes to commit"
          fi